name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version-file: package.json
      - name: Setup Aikido safe-chain
        run: npm i -g @aikidosec/safe-chain
      - name: Install dependencies
        run: aikido-npm ci
      - name: Run linter
        run: npm run lint
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version-file: package.json
      - name: Setup Aikido safe-chain
        run: npm i -g @aikidosec/safe-chain
      - name: Install dependencies
        run: aikido-npm ci
      - name: Start MongoDB
        run: docker run --name mongodb --rm -d -p 27017:27017 mongo
      - name: Run tests
        run: ./test.sh
      - name: Stop MongoDB
        run: docker stop mongodb
  release:
    name: release
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs: [check, test]
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      published: ${{ steps.semantic-release.outputs.published }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version-file: package.json
      - name: Setup Aikido safe-chain
        run: npm i -g @aikidosec/safe-chain
      - name: Install dependencies
        run: aikido-npm ci
      - name: Create release
        run: npx semantic-release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  image:
    name: image
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && needs.release.outputs.published == 'true' }}
    needs: [release]
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: main
          fetch-depth: 0
      - name: Set version
        run: echo "APP_VERSION=$(git describe --tags --abbrev=0 | sed -r 's/^v(.*)$/\1/')" >> "$GITHUB_OUTPUT"
        id: set-version
      - name: Checkout version
        run: git checkout v${{ steps.set-version.outputs.APP_VERSION }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Setup Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.00
        with:
          file: ./Dockerfile
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/robin-w151/orfarchiv-scraper:latest,ghcr.io/robin-w151/orfarchiv-scraper:${{ steps.set-version.outputs.APP_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=node:${{ vars.NODE_VERSION }}-alpine
